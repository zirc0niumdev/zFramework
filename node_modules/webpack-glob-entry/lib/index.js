'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var assoc = function assoc(key, value, object) {
  return object[key] = value, object;
};

var entry = function entry() {
  for (var _len = arguments.length, patterns = Array(_len), _key = 0; _key < _len; _key++) {
    patterns[_key] = arguments[_key];
  }

  return patterns.map(patternToEntries(typeof patterns[0] === 'string' ? entryName : typeof patterns[0] === 'function' ? patterns.shift() : typeError('First parameter of entry must be String or Function'))).reduce(function (a, b) {
    return Object.assign(a, b);
  }, {});
};

entry.basePath = function () {
  var basePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.';
  var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return function (fullPath) {
    var directory = function () {
      var relativePath = (0, _path.relative)(basePath, fullPath);
      var relativeDirName = (0, _path.dirname)(relativePath);

      if (relativeDirName === '.') {
        return '';
      } else {
        return `${ relativeDirName }/`;
      }
    }();

    var fileName = ext ? (0, _path.basename)(fullPath, ext) : entryName(fullPath);

    return directory + fileName;
  };
};

var entryName = function entryName(path) {
  return path.split('/').pop().split('.').shift();
};

var patternToEntries = function patternToEntries(entryNameFn) {
  return function (pattern) {
    return _glob2.default.sync(pattern).map(function (path) {
      return [entryNameFn(path), path];
    }).reduce(function (object, _ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      return assoc(key, value, object);
    }, {});
  };
};

var typeError = function typeError(message) {
  throw new TypeError(message);
};

exports.default = entry;
module.exports = exports['default'];
